package greentower.stage.minigames.mastermind;import greentower.IO.Input;import greentower.IO.Output;import greentower.stage.minigames.MiniGame;/** * Represents a specific MasterMind Game (player mode) * @author delomeza */public class MasterMind extends MiniGame{	/**	 * @param dialog	 *            Dialog to display at the beginning of the game	 * @param stageIndex	 */	public MasterMind(String dialog, int stageIndex)	{		super(dialog, stageIndex);	}	/**	 * We can only try 12 combinations to find the solution	 */	public final static int DEFAULT_TRIES = 12;	/**	 * Counts the number of tries (max = 12)	 */	protected int counter;	/**	 * The result that the player has to find	 */	private Combination code = new Combination();	/**	 * The combination that the player give to find the solution	 */	private Combination proposition;	/**	 * Displays the way to dial the combination	 */	protected static void DisplayColor()	{		System.out.println(" R : Red \n G : Green \n B : Blue \n M : Magenta \n O : Orange \n P : Pink"); //$NON-NLS-1$	}	/**	 * Check if the current string match the expected format	 * @param str	 *            Current string to test	 * @return true if the given string contains the correct letter false else	 */	public static boolean stringChecker(String str)	{		if (str.length() != 4)			return false;		for (int i = 0; i < 4; i++)		{			char carac = str.charAt(i);			if (carac != 'R' & carac != 'G' & carac != 'B' & carac != 'O' & carac != 'M' & carac != 'P')			{				return false;			}		}		return true;	}	@Override	public int playStage(Output display, Input input)	{		display.showStageIntroduction(this.index);		display.showDialog(this.dialog);		display.MasterMind();			this.init();				// Create checkers to check the player's propositions		Checker tmp = this.code.check(this.code);		// Create an initial proposition (not considered)		this.proposition = new Combination();		// Counts the tries		int tries = 0;		int result;		while(true)		{			String str;						display.showText("\nEssai nÂ° : " + tries + ", Maximum :" + DEFAULT_TRIES);			display.showText("\nListe des couleurs : " + Color.BLUE + "(B) " + Color.GREEN + "(G) " + Color.MAGENTA + "(M) "+ Color.ORANGE + "(O) " + Color.PINK + "(P) " + Color.RED + "(R)\n");			display.showText("Veuillez saisir votre proposition :");			str = input.inputString().toUpperCase();			while(str.length() != 4 || !stringChecker(str))			{				display.showText("\nVeuillez saisir votre proposition correct (GGGG):");				str = input.inputString().toUpperCase();			}			for(int i = 0; i < 4; i++)			{				Color value = Color.getColor(str.charAt(i));				this.proposition.getCombination()[i] = value;			}			if(this.code.check(this.proposition).equals(tmp)) // Win			{				result = MiniGame.RESULT_VICTORY;				tries++;				break;			}			else if(tries == DEFAULT_TRIES) // Loose			{				result = MiniGame.RESULT_LOOSE;				break;			}			else // New Turn			{				tries++;				display.showText(this.code.check(this.proposition).toString());			}		}		display.showMiniGameResult(result);		display.showStageEnd(this.index);		return result;	}	@Override	public void init() 	{		this.code = new Combination();	}	/**	 * Permits to set a new code to find	 * @param code	 */	protected void setCode(Combination code)	{		this.code = code;	}	}