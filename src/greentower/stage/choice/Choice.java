package greentower.stage.choice;import greentower.IO.Input;import greentower.IO.Output;import greentower.core.ListOfStages;import greentower.stage.Stage;/** *  * This class represents a choice *  * @author Florent */public class Choice extends Stage{	/**	 * 	 * Dialog before the choice	 * 	 */	private final Dialog dialog;	/**	 * 	 * Answers to the dialog	 * 	 */	private final Answers answers; // Ça sera un dictionnaire à la fin	/**	 * 	 * Index of the answer of the player	 * 	 */	private int indexPlayerAnswer;	/**	 * 	 * Choice's constructor with given dialog, choices and next stages	 * 	 * @param initialDialog	 * 	 *            Dialog of the choice	 * 	 * @param initialAnswers	 * @param stageIndex	 * 	 */	public Choice(Dialog initialDialog, Answers initialAnswers, int stageIndex)	{		this.index = stageIndex;		this.dialog = initialDialog;		this.answers = initialAnswers;		this.indexPlayerAnswer = -1;		this.stageIsFinal = false;	}	/**	 * 	 * Choice's constructor with given dialog, choices and next stages	 * 	 * @param initialDialog	 * 	 *            Dialog of the choice	 * 	 * @param initialAnswers	 * 	 * @param stageIndex	 * @param initialStageIsFinal	 * 	 */	public Choice(Dialog initialDialog, Answers initialAnswers, int stageIndex, boolean initialStageIsFinal)	{		this.index = stageIndex;		this.dialog = initialDialog;		this.answers = initialAnswers;		this.indexPlayerAnswer = -1;		this.stageIsFinal = initialStageIsFinal;	}	@Override	public String toString()	{		String result = "Choice [\n" + this.dialog.toString() + ", Answers = ";				for (int index = 0; index < this.answers.getAnswers().length; index++)			result += this.answers.getAnswerAt(index) + ',';		return result += "]";	}		public int playStage(Output display, Input input)	{		display.showStageIntroduction(ListOfStages.getStageIndex(this));		display.showDialog(this.dialog);		display.showAnswers(this.answers);		this.setIndexPlayerAnswer(input.inputInt());				switch (ListOfStages.nextStages[this.index].length)		{			case 2:			{				while(this.indexPlayerAnswer != 0 && this.indexPlayerAnswer != 1)				{					display.showError("Incorrect entry\n>");					this.setIndexPlayerAnswer(input.inputInt());				}				break;			}			case 4:			{				while(this.indexPlayerAnswer != 0 && this.indexPlayerAnswer != 1 && this.indexPlayerAnswer != 2 && this.indexPlayerAnswer != 3)				{					display.showError("Incorrect entry\n>");					this.setIndexPlayerAnswer(input.inputInt());				}				break;			}			default:			{				while(this.indexPlayerAnswer != 0)				{					display.showError("Incorrect entry\n>");					this.setIndexPlayerAnswer(input.inputInt());				}				break;			}		}				display.showStageEnd(ListOfStages.getStageIndex(this));		return this.indexPlayerAnswer;	}	/**	 * 	 * @return the indexPlayerAnswer	 * 	 */	public int getIndexPlayerAnswer()	{		return this.indexPlayerAnswer;	}	/**	 * 	 * @param indexPlayerAnswer	 *            the indexPlayerAnswer to set	 * 	 */	public void setIndexPlayerAnswer(int indexPlayerAnswer)	{		this.indexPlayerAnswer = indexPlayerAnswer;	}}